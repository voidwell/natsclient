// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: transport/ps2eventlistener/ps2eventlistener.proto

package msg_ps2eventlistener

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName string               `protobuf:"bytes,1,opt,name=eventName,proto3" json:"eventName,omitempty"`
	WorldID   int32                `protobuf:"varint,2,opt,name=worldID,proto3" json:"worldID,omitempty"`
	ZoneID    int32                `protobuf:"varint,3,opt,name=zoneID,proto3" json:"zoneID,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Payload   string               `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CensusEvent) Reset() {
	*x = CensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CensusEvent) ProtoMessage() {}

func (x *CensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CensusEvent.ProtoReflect.Descriptor instead.
func (*CensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{0}
}

func (x *CensusEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *CensusEvent) GetWorldID() int32 {
	if x != nil {
		return x.WorldID
	}
	return 0
}

func (x *CensusEvent) GetZoneID() int32 {
	if x != nil {
		return x.ZoneID
	}
	return 0
}

func (x *CensusEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CensusEvent) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type AchievementEarnedCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterID   string `protobuf:"bytes,1,opt,name=characterID,proto3" json:"characterID,omitempty"`
	AchievementID string `protobuf:"bytes,2,opt,name=achievementID,proto3" json:"achievementID,omitempty"`
}

func (x *AchievementEarnedCensusEvent) Reset() {
	*x = AchievementEarnedCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementEarnedCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementEarnedCensusEvent) ProtoMessage() {}

func (x *AchievementEarnedCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementEarnedCensusEvent.ProtoReflect.Descriptor instead.
func (*AchievementEarnedCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{1}
}

func (x *AchievementEarnedCensusEvent) GetCharacterID() string {
	if x != nil {
		return x.CharacterID
	}
	return ""
}

func (x *AchievementEarnedCensusEvent) GetAchievementID() string {
	if x != nil {
		return x.AchievementID
	}
	return ""
}

type BattleRankUpCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterID string `protobuf:"bytes,1,opt,name=characterID,proto3" json:"characterID,omitempty"`
	BattleRank  int32  `protobuf:"varint,2,opt,name=battleRank,proto3" json:"battleRank,omitempty"`
}

func (x *BattleRankUpCensusEvent) Reset() {
	*x = BattleRankUpCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleRankUpCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleRankUpCensusEvent) ProtoMessage() {}

func (x *BattleRankUpCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleRankUpCensusEvent.ProtoReflect.Descriptor instead.
func (*BattleRankUpCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{2}
}

func (x *BattleRankUpCensusEvent) GetCharacterID() string {
	if x != nil {
		return x.CharacterID
	}
	return ""
}

func (x *BattleRankUpCensusEvent) GetBattleRank() int32 {
	if x != nil {
		return x.BattleRank
	}
	return 0
}

type ContinentLockCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggeringFactionID int32   `protobuf:"varint,1,opt,name=triggeringFactionID,proto3" json:"triggeringFactionID,omitempty"`
	MetagameEventID     int32   `protobuf:"varint,2,opt,name=metagameEventID,proto3" json:"metagameEventID,omitempty"`
	VsPopulation        float32 `protobuf:"fixed32,3,opt,name=vsPopulation,proto3" json:"vsPopulation,omitempty"`
	NcPopulation        float32 `protobuf:"fixed32,4,opt,name=ncPopulation,proto3" json:"ncPopulation,omitempty"`
	TrPopulation        float32 `protobuf:"fixed32,5,opt,name=trPopulation,proto3" json:"trPopulation,omitempty"`
}

func (x *ContinentLockCensusEvent) Reset() {
	*x = ContinentLockCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinentLockCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinentLockCensusEvent) ProtoMessage() {}

func (x *ContinentLockCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinentLockCensusEvent.ProtoReflect.Descriptor instead.
func (*ContinentLockCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{3}
}

func (x *ContinentLockCensusEvent) GetTriggeringFactionID() int32 {
	if x != nil {
		return x.TriggeringFactionID
	}
	return 0
}

func (x *ContinentLockCensusEvent) GetMetagameEventID() int32 {
	if x != nil {
		return x.MetagameEventID
	}
	return 0
}

func (x *ContinentLockCensusEvent) GetVsPopulation() float32 {
	if x != nil {
		return x.VsPopulation
	}
	return 0
}

func (x *ContinentLockCensusEvent) GetNcPopulation() float32 {
	if x != nil {
		return x.NcPopulation
	}
	return 0
}

func (x *ContinentLockCensusEvent) GetTrPopulation() float32 {
	if x != nil {
		return x.TrPopulation
	}
	return 0
}

type ContinentUnlockCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggeringFactionID int32 `protobuf:"varint,1,opt,name=triggeringFactionID,proto3" json:"triggeringFactionID,omitempty"`
	MetagameEventID     int32 `protobuf:"varint,2,opt,name=metagameEventID,proto3" json:"metagameEventID,omitempty"`
}

func (x *ContinentUnlockCensusEvent) Reset() {
	*x = ContinentUnlockCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinentUnlockCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinentUnlockCensusEvent) ProtoMessage() {}

func (x *ContinentUnlockCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinentUnlockCensusEvent.ProtoReflect.Descriptor instead.
func (*ContinentUnlockCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{4}
}

func (x *ContinentUnlockCensusEvent) GetTriggeringFactionID() int32 {
	if x != nil {
		return x.TriggeringFactionID
	}
	return 0
}

func (x *ContinentUnlockCensusEvent) GetMetagameEventID() int32 {
	if x != nil {
		return x.MetagameEventID
	}
	return 0
}

type DeathCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackerCharacterID        string `protobuf:"bytes,1,opt,name=attackerCharacterID,proto3" json:"attackerCharacterID,omitempty"`
	AttackerFireModeID         int32  `protobuf:"varint,2,opt,name=attackerFireModeID,proto3" json:"attackerFireModeID,omitempty"`
	AttackerLoadoutID          int32  `protobuf:"varint,3,opt,name=attackerLoadoutID,proto3" json:"attackerLoadoutID,omitempty"`
	AttackerVehicleID          int32  `protobuf:"varint,4,opt,name=attackerVehicleID,proto3" json:"attackerVehicleID,omitempty"`
	AttackerWeaponID           int32  `protobuf:"varint,5,opt,name=attackerWeaponID,proto3" json:"attackerWeaponID,omitempty"`
	CharacterID                string `protobuf:"bytes,6,opt,name=characterID,proto3" json:"characterID,omitempty"`
	CharacterLoadoutID         int32  `protobuf:"varint,7,opt,name=characterLoadoutID,proto3" json:"characterLoadoutID,omitempty"`
	IsHeadshot                 bool   `protobuf:"varint,8,opt,name=isHeadshot,proto3" json:"isHeadshot,omitempty"`
	AttackerCharacterName      string `protobuf:"bytes,9,opt,name=attackerCharacterName,proto3" json:"attackerCharacterName,omitempty"`
	AttackerCharacterFactionID int32  `protobuf:"varint,10,opt,name=attackerCharacterFactionID,proto3" json:"attackerCharacterFactionID,omitempty"`
	AttackerCharacterOutfitID  string `protobuf:"bytes,11,opt,name=attackerCharacterOutfitID,proto3" json:"attackerCharacterOutfitID,omitempty"`
	AttackerBattleRank         int32  `protobuf:"varint,12,opt,name=attackerBattleRank,proto3" json:"attackerBattleRank,omitempty"`
	CharacterName              string `protobuf:"bytes,13,opt,name=characterName,proto3" json:"characterName,omitempty"`
	CharacterFactionID         int32  `protobuf:"varint,14,opt,name=characterFactionID,proto3" json:"characterFactionID,omitempty"`
	CharacterOutfitID          string `protobuf:"bytes,15,opt,name=characterOutfitID,proto3" json:"characterOutfitID,omitempty"`
	CharacterBattleRank        int32  `protobuf:"varint,16,opt,name=characterBattleRank,proto3" json:"characterBattleRank,omitempty"`
}

func (x *DeathCensusEvent) Reset() {
	*x = DeathCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeathCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeathCensusEvent) ProtoMessage() {}

func (x *DeathCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeathCensusEvent.ProtoReflect.Descriptor instead.
func (*DeathCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{5}
}

func (x *DeathCensusEvent) GetAttackerCharacterID() string {
	if x != nil {
		return x.AttackerCharacterID
	}
	return ""
}

func (x *DeathCensusEvent) GetAttackerFireModeID() int32 {
	if x != nil {
		return x.AttackerFireModeID
	}
	return 0
}

func (x *DeathCensusEvent) GetAttackerLoadoutID() int32 {
	if x != nil {
		return x.AttackerLoadoutID
	}
	return 0
}

func (x *DeathCensusEvent) GetAttackerVehicleID() int32 {
	if x != nil {
		return x.AttackerVehicleID
	}
	return 0
}

func (x *DeathCensusEvent) GetAttackerWeaponID() int32 {
	if x != nil {
		return x.AttackerWeaponID
	}
	return 0
}

func (x *DeathCensusEvent) GetCharacterID() string {
	if x != nil {
		return x.CharacterID
	}
	return ""
}

func (x *DeathCensusEvent) GetCharacterLoadoutID() int32 {
	if x != nil {
		return x.CharacterLoadoutID
	}
	return 0
}

func (x *DeathCensusEvent) GetIsHeadshot() bool {
	if x != nil {
		return x.IsHeadshot
	}
	return false
}

func (x *DeathCensusEvent) GetAttackerCharacterName() string {
	if x != nil {
		return x.AttackerCharacterName
	}
	return ""
}

func (x *DeathCensusEvent) GetAttackerCharacterFactionID() int32 {
	if x != nil {
		return x.AttackerCharacterFactionID
	}
	return 0
}

func (x *DeathCensusEvent) GetAttackerCharacterOutfitID() string {
	if x != nil {
		return x.AttackerCharacterOutfitID
	}
	return ""
}

func (x *DeathCensusEvent) GetAttackerBattleRank() int32 {
	if x != nil {
		return x.AttackerBattleRank
	}
	return 0
}

func (x *DeathCensusEvent) GetCharacterName() string {
	if x != nil {
		return x.CharacterName
	}
	return ""
}

func (x *DeathCensusEvent) GetCharacterFactionID() int32 {
	if x != nil {
		return x.CharacterFactionID
	}
	return 0
}

func (x *DeathCensusEvent) GetCharacterOutfitID() string {
	if x != nil {
		return x.CharacterOutfitID
	}
	return ""
}

func (x *DeathCensusEvent) GetCharacterBattleRank() int32 {
	if x != nil {
		return x.CharacterBattleRank
	}
	return 0
}

type FacilityControlCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacilityID   int32  `protobuf:"varint,1,opt,name=facilityID,proto3" json:"facilityID,omitempty"`
	NewFactionID int32  `protobuf:"varint,2,opt,name=newFactionID,proto3" json:"newFactionID,omitempty"`
	OldFactionID int32  `protobuf:"varint,3,opt,name=oldFactionID,proto3" json:"oldFactionID,omitempty"`
	DurationHeld int32  `protobuf:"varint,4,opt,name=durationHeld,proto3" json:"durationHeld,omitempty"`
	OutfitID     string `protobuf:"bytes,5,opt,name=outfitID,proto3" json:"outfitID,omitempty"`
	OutfitName   string `protobuf:"bytes,6,opt,name=outfitName,proto3" json:"outfitName,omitempty"`
	OutfitAlias  string `protobuf:"bytes,7,opt,name=outfitAlias,proto3" json:"outfitAlias,omitempty"`
}

func (x *FacilityControlCensusEvent) Reset() {
	*x = FacilityControlCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacilityControlCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacilityControlCensusEvent) ProtoMessage() {}

func (x *FacilityControlCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacilityControlCensusEvent.ProtoReflect.Descriptor instead.
func (*FacilityControlCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{6}
}

func (x *FacilityControlCensusEvent) GetFacilityID() int32 {
	if x != nil {
		return x.FacilityID
	}
	return 0
}

func (x *FacilityControlCensusEvent) GetNewFactionID() int32 {
	if x != nil {
		return x.NewFactionID
	}
	return 0
}

func (x *FacilityControlCensusEvent) GetOldFactionID() int32 {
	if x != nil {
		return x.OldFactionID
	}
	return 0
}

func (x *FacilityControlCensusEvent) GetDurationHeld() int32 {
	if x != nil {
		return x.DurationHeld
	}
	return 0
}

func (x *FacilityControlCensusEvent) GetOutfitID() string {
	if x != nil {
		return x.OutfitID
	}
	return ""
}

func (x *FacilityControlCensusEvent) GetOutfitName() string {
	if x != nil {
		return x.OutfitName
	}
	return ""
}

func (x *FacilityControlCensusEvent) GetOutfitAlias() string {
	if x != nil {
		return x.OutfitAlias
	}
	return ""
}

type GainExperienceCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterID  string `protobuf:"bytes,1,opt,name=characterID,proto3" json:"characterID,omitempty"`
	ExperienceID int32  `protobuf:"varint,2,opt,name=experienceID,proto3" json:"experienceID,omitempty"`
	Amount       int32  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	LoadoutID    int32  `protobuf:"varint,4,opt,name=loadoutID,proto3" json:"loadoutID,omitempty"`
	OtherID      string `protobuf:"bytes,5,opt,name=otherID,proto3" json:"otherID,omitempty"`
}

func (x *GainExperienceCensusEvent) Reset() {
	*x = GainExperienceCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GainExperienceCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GainExperienceCensusEvent) ProtoMessage() {}

func (x *GainExperienceCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GainExperienceCensusEvent.ProtoReflect.Descriptor instead.
func (*GainExperienceCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{7}
}

func (x *GainExperienceCensusEvent) GetCharacterID() string {
	if x != nil {
		return x.CharacterID
	}
	return ""
}

func (x *GainExperienceCensusEvent) GetExperienceID() int32 {
	if x != nil {
		return x.ExperienceID
	}
	return 0
}

func (x *GainExperienceCensusEvent) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GainExperienceCensusEvent) GetLoadoutID() int32 {
	if x != nil {
		return x.LoadoutID
	}
	return 0
}

func (x *GainExperienceCensusEvent) GetOtherID() string {
	if x != nil {
		return x.OtherID
	}
	return ""
}

type MetagameEventCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceID         int32   `protobuf:"varint,1,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	MetagameEventID    int32   `protobuf:"varint,2,opt,name=metagameEventID,proto3" json:"metagameEventID,omitempty"`
	MetagameEventState string  `protobuf:"bytes,3,opt,name=metagameEventState,proto3" json:"metagameEventState,omitempty"`
	FactionVS          float32 `protobuf:"fixed32,4,opt,name=factionVS,proto3" json:"factionVS,omitempty"`
	FactionNC          float32 `protobuf:"fixed32,5,opt,name=factionNC,proto3" json:"factionNC,omitempty"`
	FactionTR          float32 `protobuf:"fixed32,6,opt,name=factionTR,proto3" json:"factionTR,omitempty"`
	ExperienceBonus    float32 `protobuf:"fixed32,7,opt,name=experienceBonus,proto3" json:"experienceBonus,omitempty"`
}

func (x *MetagameEventCensusEvent) Reset() {
	*x = MetagameEventCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetagameEventCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetagameEventCensusEvent) ProtoMessage() {}

func (x *MetagameEventCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetagameEventCensusEvent.ProtoReflect.Descriptor instead.
func (*MetagameEventCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{8}
}

func (x *MetagameEventCensusEvent) GetInstanceID() int32 {
	if x != nil {
		return x.InstanceID
	}
	return 0
}

func (x *MetagameEventCensusEvent) GetMetagameEventID() int32 {
	if x != nil {
		return x.MetagameEventID
	}
	return 0
}

func (x *MetagameEventCensusEvent) GetMetagameEventState() string {
	if x != nil {
		return x.MetagameEventState
	}
	return ""
}

func (x *MetagameEventCensusEvent) GetFactionVS() float32 {
	if x != nil {
		return x.FactionVS
	}
	return 0
}

func (x *MetagameEventCensusEvent) GetFactionNC() float32 {
	if x != nil {
		return x.FactionNC
	}
	return 0
}

func (x *MetagameEventCensusEvent) GetFactionTR() float32 {
	if x != nil {
		return x.FactionTR
	}
	return 0
}

func (x *MetagameEventCensusEvent) GetExperienceBonus() float32 {
	if x != nil {
		return x.ExperienceBonus
	}
	return 0
}

type PlayerFacilityCaptureCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterID        string `protobuf:"bytes,1,opt,name=characterID,proto3" json:"characterID,omitempty"`
	FacilityID         int32  `protobuf:"varint,2,opt,name=facilityID,proto3" json:"facilityID,omitempty"`
	OutfitID           string `protobuf:"bytes,3,opt,name=outfitID,proto3" json:"outfitID,omitempty"`
	CharacterName      string `protobuf:"bytes,4,opt,name=characterName,proto3" json:"characterName,omitempty"`
	CharacterFactionID int32  `protobuf:"varint,5,opt,name=characterFactionID,proto3" json:"characterFactionID,omitempty"`
	OutfitName         string `protobuf:"bytes,6,opt,name=outfitName,proto3" json:"outfitName,omitempty"`
	OutfitAlias        string `protobuf:"bytes,7,opt,name=outfitAlias,proto3" json:"outfitAlias,omitempty"`
}

func (x *PlayerFacilityCaptureCensusEvent) Reset() {
	*x = PlayerFacilityCaptureCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerFacilityCaptureCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFacilityCaptureCensusEvent) ProtoMessage() {}

func (x *PlayerFacilityCaptureCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFacilityCaptureCensusEvent.ProtoReflect.Descriptor instead.
func (*PlayerFacilityCaptureCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerFacilityCaptureCensusEvent) GetCharacterID() string {
	if x != nil {
		return x.CharacterID
	}
	return ""
}

func (x *PlayerFacilityCaptureCensusEvent) GetFacilityID() int32 {
	if x != nil {
		return x.FacilityID
	}
	return 0
}

func (x *PlayerFacilityCaptureCensusEvent) GetOutfitID() string {
	if x != nil {
		return x.OutfitID
	}
	return ""
}

func (x *PlayerFacilityCaptureCensusEvent) GetCharacterName() string {
	if x != nil {
		return x.CharacterName
	}
	return ""
}

func (x *PlayerFacilityCaptureCensusEvent) GetCharacterFactionID() int32 {
	if x != nil {
		return x.CharacterFactionID
	}
	return 0
}

func (x *PlayerFacilityCaptureCensusEvent) GetOutfitName() string {
	if x != nil {
		return x.OutfitName
	}
	return ""
}

func (x *PlayerFacilityCaptureCensusEvent) GetOutfitAlias() string {
	if x != nil {
		return x.OutfitAlias
	}
	return ""
}

type PlayerFacilityDefendCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterID        string `protobuf:"bytes,1,opt,name=characterID,proto3" json:"characterID,omitempty"`
	FacilityID         int32  `protobuf:"varint,2,opt,name=facilityID,proto3" json:"facilityID,omitempty"`
	OutfitID           string `protobuf:"bytes,3,opt,name=outfitID,proto3" json:"outfitID,omitempty"`
	CharacterName      string `protobuf:"bytes,4,opt,name=characterName,proto3" json:"characterName,omitempty"`
	CharacterFactionID int32  `protobuf:"varint,5,opt,name=characterFactionID,proto3" json:"characterFactionID,omitempty"`
	OutfitName         string `protobuf:"bytes,6,opt,name=outfitName,proto3" json:"outfitName,omitempty"`
	OutfitAlias        string `protobuf:"bytes,7,opt,name=outfitAlias,proto3" json:"outfitAlias,omitempty"`
}

func (x *PlayerFacilityDefendCensusEvent) Reset() {
	*x = PlayerFacilityDefendCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerFacilityDefendCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFacilityDefendCensusEvent) ProtoMessage() {}

func (x *PlayerFacilityDefendCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFacilityDefendCensusEvent.ProtoReflect.Descriptor instead.
func (*PlayerFacilityDefendCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerFacilityDefendCensusEvent) GetCharacterID() string {
	if x != nil {
		return x.CharacterID
	}
	return ""
}

func (x *PlayerFacilityDefendCensusEvent) GetFacilityID() int32 {
	if x != nil {
		return x.FacilityID
	}
	return 0
}

func (x *PlayerFacilityDefendCensusEvent) GetOutfitID() string {
	if x != nil {
		return x.OutfitID
	}
	return ""
}

func (x *PlayerFacilityDefendCensusEvent) GetCharacterName() string {
	if x != nil {
		return x.CharacterName
	}
	return ""
}

func (x *PlayerFacilityDefendCensusEvent) GetCharacterFactionID() int32 {
	if x != nil {
		return x.CharacterFactionID
	}
	return 0
}

func (x *PlayerFacilityDefendCensusEvent) GetOutfitName() string {
	if x != nil {
		return x.OutfitName
	}
	return ""
}

func (x *PlayerFacilityDefendCensusEvent) GetOutfitAlias() string {
	if x != nil {
		return x.OutfitAlias
	}
	return ""
}

type PlayerLoginCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterID        string `protobuf:"bytes,1,opt,name=characterID,proto3" json:"characterID,omitempty"`
	CharacterName      string `protobuf:"bytes,2,opt,name=characterName,proto3" json:"characterName,omitempty"`
	CharacterFactionID int32  `protobuf:"varint,3,opt,name=characterFactionID,proto3" json:"characterFactionID,omitempty"`
}

func (x *PlayerLoginCensusEvent) Reset() {
	*x = PlayerLoginCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLoginCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLoginCensusEvent) ProtoMessage() {}

func (x *PlayerLoginCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLoginCensusEvent.ProtoReflect.Descriptor instead.
func (*PlayerLoginCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerLoginCensusEvent) GetCharacterID() string {
	if x != nil {
		return x.CharacterID
	}
	return ""
}

func (x *PlayerLoginCensusEvent) GetCharacterName() string {
	if x != nil {
		return x.CharacterName
	}
	return ""
}

func (x *PlayerLoginCensusEvent) GetCharacterFactionID() int32 {
	if x != nil {
		return x.CharacterFactionID
	}
	return 0
}

type PlayerLogoutCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterID        string `protobuf:"bytes,1,opt,name=characterID,proto3" json:"characterID,omitempty"`
	CharacterName      string `protobuf:"bytes,2,opt,name=characterName,proto3" json:"characterName,omitempty"`
	CharacterFactionID int32  `protobuf:"varint,3,opt,name=characterFactionID,proto3" json:"characterFactionID,omitempty"`
}

func (x *PlayerLogoutCensusEvent) Reset() {
	*x = PlayerLogoutCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLogoutCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLogoutCensusEvent) ProtoMessage() {}

func (x *PlayerLogoutCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLogoutCensusEvent.ProtoReflect.Descriptor instead.
func (*PlayerLogoutCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{12}
}

func (x *PlayerLogoutCensusEvent) GetCharacterID() string {
	if x != nil {
		return x.CharacterID
	}
	return ""
}

func (x *PlayerLogoutCensusEvent) GetCharacterName() string {
	if x != nil {
		return x.CharacterName
	}
	return ""
}

func (x *PlayerLogoutCensusEvent) GetCharacterFactionID() int32 {
	if x != nil {
		return x.CharacterFactionID
	}
	return 0
}

type VehicleDestroyCensusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackerCharacterID        string `protobuf:"bytes,1,opt,name=attackerCharacterID,proto3" json:"attackerCharacterID,omitempty"`
	AttackerLoadoutID          int32  `protobuf:"varint,2,opt,name=attackerLoadoutID,proto3" json:"attackerLoadoutID,omitempty"`
	AttackerVehicleID          int32  `protobuf:"varint,3,opt,name=attackerVehicleID,proto3" json:"attackerVehicleID,omitempty"`
	AttackerWeaponID           int32  `protobuf:"varint,4,opt,name=attackerWeaponID,proto3" json:"attackerWeaponID,omitempty"`
	CharacterID                string `protobuf:"bytes,5,opt,name=characterID,proto3" json:"characterID,omitempty"`
	FacilityID                 int32  `protobuf:"varint,6,opt,name=facilityID,proto3" json:"facilityID,omitempty"`
	FactionID                  int32  `protobuf:"varint,7,opt,name=factionID,proto3" json:"factionID,omitempty"`
	VehicleID                  int32  `protobuf:"varint,8,opt,name=vehicleID,proto3" json:"vehicleID,omitempty"`
	AttackerCharacterName      string `protobuf:"bytes,9,opt,name=attackerCharacterName,proto3" json:"attackerCharacterName,omitempty"`
	AttackerCharacterFactionID int32  `protobuf:"varint,10,opt,name=attackerCharacterFactionID,proto3" json:"attackerCharacterFactionID,omitempty"`
	AttackerCharacterOutfitID  string `protobuf:"bytes,11,opt,name=attackerCharacterOutfitID,proto3" json:"attackerCharacterOutfitID,omitempty"`
	AttackerBattleRank         int32  `protobuf:"varint,12,opt,name=attackerBattleRank,proto3" json:"attackerBattleRank,omitempty"`
	CharacterName              string `protobuf:"bytes,13,opt,name=characterName,proto3" json:"characterName,omitempty"`
	CharacterFactionID         int32  `protobuf:"varint,14,opt,name=characterFactionID,proto3" json:"characterFactionID,omitempty"`
	CharacterOutfitID          string `protobuf:"bytes,15,opt,name=characterOutfitID,proto3" json:"characterOutfitID,omitempty"`
	CharacterBattleRank        int32  `protobuf:"varint,16,opt,name=characterBattleRank,proto3" json:"characterBattleRank,omitempty"`
}

func (x *VehicleDestroyCensusEvent) Reset() {
	*x = VehicleDestroyCensusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleDestroyCensusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleDestroyCensusEvent) ProtoMessage() {}

func (x *VehicleDestroyCensusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleDestroyCensusEvent.ProtoReflect.Descriptor instead.
func (*VehicleDestroyCensusEvent) Descriptor() ([]byte, []int) {
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP(), []int{13}
}

func (x *VehicleDestroyCensusEvent) GetAttackerCharacterID() string {
	if x != nil {
		return x.AttackerCharacterID
	}
	return ""
}

func (x *VehicleDestroyCensusEvent) GetAttackerLoadoutID() int32 {
	if x != nil {
		return x.AttackerLoadoutID
	}
	return 0
}

func (x *VehicleDestroyCensusEvent) GetAttackerVehicleID() int32 {
	if x != nil {
		return x.AttackerVehicleID
	}
	return 0
}

func (x *VehicleDestroyCensusEvent) GetAttackerWeaponID() int32 {
	if x != nil {
		return x.AttackerWeaponID
	}
	return 0
}

func (x *VehicleDestroyCensusEvent) GetCharacterID() string {
	if x != nil {
		return x.CharacterID
	}
	return ""
}

func (x *VehicleDestroyCensusEvent) GetFacilityID() int32 {
	if x != nil {
		return x.FacilityID
	}
	return 0
}

func (x *VehicleDestroyCensusEvent) GetFactionID() int32 {
	if x != nil {
		return x.FactionID
	}
	return 0
}

func (x *VehicleDestroyCensusEvent) GetVehicleID() int32 {
	if x != nil {
		return x.VehicleID
	}
	return 0
}

func (x *VehicleDestroyCensusEvent) GetAttackerCharacterName() string {
	if x != nil {
		return x.AttackerCharacterName
	}
	return ""
}

func (x *VehicleDestroyCensusEvent) GetAttackerCharacterFactionID() int32 {
	if x != nil {
		return x.AttackerCharacterFactionID
	}
	return 0
}

func (x *VehicleDestroyCensusEvent) GetAttackerCharacterOutfitID() string {
	if x != nil {
		return x.AttackerCharacterOutfitID
	}
	return ""
}

func (x *VehicleDestroyCensusEvent) GetAttackerBattleRank() int32 {
	if x != nil {
		return x.AttackerBattleRank
	}
	return 0
}

func (x *VehicleDestroyCensusEvent) GetCharacterName() string {
	if x != nil {
		return x.CharacterName
	}
	return ""
}

func (x *VehicleDestroyCensusEvent) GetCharacterFactionID() int32 {
	if x != nil {
		return x.CharacterFactionID
	}
	return 0
}

func (x *VehicleDestroyCensusEvent) GetCharacterOutfitID() string {
	if x != nil {
		return x.CharacterOutfitID
	}
	return ""
}

func (x *VehicleDestroyCensusEvent) GetCharacterBattleRank() int32 {
	if x != nil {
		return x.CharacterBattleRank
	}
	return 0
}

var File_transport_ps2eventlistener_ps2eventlistener_proto protoreflect.FileDescriptor

var file_transport_ps2eventlistener_ps2eventlistener_proto_rawDesc = []byte{
	0x0a, 0x31, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x73, 0x32, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x73, 0x32,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x73, 0x32, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x43,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x66,
	0x0a, 0x1c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x22, 0xe2, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x65, 0x74,
	0x61, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x76, 0x73, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x76, 0x73, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x63, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6e, 0x63, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x72, 0x50, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61,
	0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x22, 0x88, 0x06, 0x0a, 0x10, 0x44, 0x65, 0x61, 0x74, 0x68, 0x43, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x46,
	0x69, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4c, 0x6f,
	0x61, 0x64, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x48, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x48, 0x65, 0x61, 0x64, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x19, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x66, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x66, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74,
	0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x86, 0x02,
	0x0a, 0x1a, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x6e, 0x65, 0x77, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x46, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x66,
	0x69, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x66,
	0x69, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x66, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x66, 0x69,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x19, 0x47, 0x61, 0x69, 0x6e, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x44, 0x22, 0x98, 0x02, 0x0a, 0x18, 0x4d,
	0x65, 0x74, 0x61, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x67,
	0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d,
	0x65, 0x74, 0x61, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x53, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x53, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x43, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x43, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x52, 0x12, 0x28, 0x0a, 0x0f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x22, 0x97, 0x02, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x66, 0x69, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x66, 0x69, 0x74,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x66,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x66, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x66,
	0x69, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x75, 0x74, 0x66, 0x69, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x91, 0x01,
	0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x43, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0xed, 0x05, 0x0a, 0x19, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4c, 0x6f, 0x61,
	0x64, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x1a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3c, 0x0a,
	0x19, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x66, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescOnce sync.Once
	file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescData = file_transport_ps2eventlistener_ps2eventlistener_proto_rawDesc
)

func file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescGZIP() []byte {
	file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescOnce.Do(func() {
		file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescData = protoimpl.X.CompressGZIP(file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescData)
	})
	return file_transport_ps2eventlistener_ps2eventlistener_proto_rawDescData
}

var file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_transport_ps2eventlistener_ps2eventlistener_proto_goTypes = []interface{}{
	(*CensusEvent)(nil),                      // 0: msg.ps2eventlistener.CensusEvent
	(*AchievementEarnedCensusEvent)(nil),     // 1: msg.ps2eventlistener.AchievementEarnedCensusEvent
	(*BattleRankUpCensusEvent)(nil),          // 2: msg.ps2eventlistener.BattleRankUpCensusEvent
	(*ContinentLockCensusEvent)(nil),         // 3: msg.ps2eventlistener.ContinentLockCensusEvent
	(*ContinentUnlockCensusEvent)(nil),       // 4: msg.ps2eventlistener.ContinentUnlockCensusEvent
	(*DeathCensusEvent)(nil),                 // 5: msg.ps2eventlistener.DeathCensusEvent
	(*FacilityControlCensusEvent)(nil),       // 6: msg.ps2eventlistener.FacilityControlCensusEvent
	(*GainExperienceCensusEvent)(nil),        // 7: msg.ps2eventlistener.GainExperienceCensusEvent
	(*MetagameEventCensusEvent)(nil),         // 8: msg.ps2eventlistener.MetagameEventCensusEvent
	(*PlayerFacilityCaptureCensusEvent)(nil), // 9: msg.ps2eventlistener.PlayerFacilityCaptureCensusEvent
	(*PlayerFacilityDefendCensusEvent)(nil),  // 10: msg.ps2eventlistener.PlayerFacilityDefendCensusEvent
	(*PlayerLoginCensusEvent)(nil),           // 11: msg.ps2eventlistener.PlayerLoginCensusEvent
	(*PlayerLogoutCensusEvent)(nil),          // 12: msg.ps2eventlistener.PlayerLogoutCensusEvent
	(*VehicleDestroyCensusEvent)(nil),        // 13: msg.ps2eventlistener.VehicleDestroyCensusEvent
	(*timestamp.Timestamp)(nil),              // 14: google.protobuf.Timestamp
}
var file_transport_ps2eventlistener_ps2eventlistener_proto_depIdxs = []int32{
	14, // 0: msg.ps2eventlistener.CensusEvent.timestamp:type_name -> google.protobuf.Timestamp
	1,  // [1:1] is the sub-list for method output_type
	1,  // [1:1] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_transport_ps2eventlistener_ps2eventlistener_proto_init() }
func file_transport_ps2eventlistener_ps2eventlistener_proto_init() {
	if File_transport_ps2eventlistener_ps2eventlistener_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementEarnedCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleRankUpCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinentLockCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinentUnlockCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeathCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacilityControlCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GainExperienceCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetagameEventCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerFacilityCaptureCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerFacilityDefendCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerLoginCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerLogoutCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleDestroyCensusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transport_ps2eventlistener_ps2eventlistener_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transport_ps2eventlistener_ps2eventlistener_proto_goTypes,
		DependencyIndexes: file_transport_ps2eventlistener_ps2eventlistener_proto_depIdxs,
		MessageInfos:      file_transport_ps2eventlistener_ps2eventlistener_proto_msgTypes,
	}.Build()
	File_transport_ps2eventlistener_ps2eventlistener_proto = out.File
	file_transport_ps2eventlistener_ps2eventlistener_proto_rawDesc = nil
	file_transport_ps2eventlistener_ps2eventlistener_proto_goTypes = nil
	file_transport_ps2eventlistener_ps2eventlistener_proto_depIdxs = nil
}
